/**
 * <h2>第13条：使类和成员的可访问性最小化</h2>
 *
 * <p/>
 * 要区别设计良好的模块与设计不好的模块，<b>最重要的因素</b>在于，
 * <b><i>这个模块对于外部的其他模块而言，是否隐藏其内部数据和其他实现细节</i></b>。
 * 设计良好的模块会<b><i>隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来</i></b>。
 * 然后，<b><i>模块之间只通过它们的 API 进行通信</i></b>，一个模块不需要知道其他模块的内部工作情况。
 * 这个概念被称为 <b><i>信息隐藏（information hiding）或封装（encapsulation）</i></b>，
 * 是软件设计的基本原则之一[Parnas72]。
 *
 * <p/>
 * <b>信息隐藏之所以非常重要</b>有许多原因，其中大多数理由都源于这样一个事实：
 * <b><i>它可以有效地解除组成系统的各模块之间的耦合关系，使得这些模块可以独立地开发、测试、优化、使用、理解和修改</i></b>。
 * 这样可以<b><i>加快系统开发的速度，因为这些模块可以并行开发</i></b>。
 * 它也<b><i>减轻了维护的负担，因为程序员可以更快地理解这些模块</i></b>，并且在调试它们的时候可以不影响其他的模块。
 * 信息隐藏<b><i>提高了软件的可重用性，因为模块之间并不紧密相连</i></b>。
 * 信息隐藏也<b><i>降低了构建大型系统的风险</i></b>，因为即使整个系统不可用，但是这些独立的模块却有可能是可用的。
 *
 * <p/>
 * Java 程序设计语言提供了许多机制（facility）来协助信息隐藏。
 * 访问控制（access control）机制[JLS, 6.6]决定了类、接口和成员的可访问性（accessibility）。
 *
 * @author xingle
 * @since 2016年05月01日 17:19
 */
package c4.g13;